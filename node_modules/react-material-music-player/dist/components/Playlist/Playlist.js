"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Playlist;
var _react = _interopRequireDefault(require("react"));
var _Box = _interopRequireDefault(require("@mui/material/Box"));
var _reactRedux = require("react-redux");
var _actionCreators = _interopRequireDefault(require("../../redux/actionCreators.js"));
var _reactDraggableList = _interopRequireDefault(require("react-draggable-list"));
var _PlaylistItemTemplate = _interopRequireDefault(require("./PlaylistItemTemplate.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function Playlist(props) {
  const sx = props.sx;
  const {
    playlist,
    currentTrack
  } = (0, _reactRedux.useSelector)(/** @type {import("../../redux/types.js").useSelectCb} */
  _ref => {
    let {
      playlist,
      currentTrack
    } = _ref;
    return {
      playlist,
      currentTrack
    };
  }, _reactRedux.shallowEqual);
  const dispatch = (0, _reactRedux.useDispatch)();
  const onReorder = newList => dispatch(_actionCreators.default.updatePlaylist(newList));
  const onTrackSelect = index => {
    // change and play track immediately
    dispatch(_actionCreators.default.changeTrack(index));
    dispatch(_actionCreators.default.play());
  };
  const draggablelistContainerRef = /*#__PURE__*/_react.default.createRef();
  return /*#__PURE__*/_react.default.createElement(_Box.default, {
    ref: draggablelistContainerRef,
    sx: {
      margin: theme => theme.spacing(),
      // require set container with fix size for draggable list
      width: "10vw",
      height: "10vh",
      ...sx // should be able to overwrite default width and height
    }
  }, " ", playlist.length > 0 ? /*#__PURE__*/_react.default.createElement(_reactDraggableList.default, {
    list: playlist,
    itemKey: "ID",
    template: _PlaylistItemTemplate.default,
    onMoveEnd: onReorder,
    container: () => draggablelistContainerRef.current,
    commonProps: {
      listOfID: playlist.map(element => element?.ID),
      currentTrackID: playlist[currentTrack]?.ID,
      onTrackSelect: onTrackSelect
    }
  }) : null);
}